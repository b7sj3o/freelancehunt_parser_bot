import asyncio
import time
from aiogram import Router, F
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)

import bot.keyboards as kb
import bot.services.users as rq
from bot.filters.admin import AdminFilter
from bot.parser.freelancehunt import parse_data

router = Router(name="user_text_handlers")


@router.message(F.text == "–ù–∞ –≥–æ–ª–æ–≤–Ω—É")
async def handle_home(message: Message):
    await message.answer(
        "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞ –≥–æ–ª–æ–≤–Ω—É",
        reply_markup=await kb.reply.menu.menu_keyboard(message.chat.id),
    )


# @router.message(F.text == "–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", AdminFilter())
# async def handle_admin_panel(message: Message):
#     await message.answer("–í—ñ—Ç–∞—î–º–æ, –∞–¥–º—ñ–Ω!", reply_markup=kb.reply.menu.admin_keyboard())


@router.message(F.text == "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó")
async def handle_check_vacancies(message: Message):
    user = await rq.get_user_by_id(message.chat.id)

    links = [item.link for item in user.category_items]
    data = []
    
    for link in links:
        data.extend(await parse_data(link, user))

    for count, item in enumerate(data):
        if count >= 5:
            break

        await message.answer(
            text=f"–í–∞–∫–∞–Ω—Å—ñ—è: {item.title}\n"
            f"–¶—ñ–Ω–∞: {item.price}–≥—Ä–Ω\n"
            f"–û–ø–∏—Å: {item.description}\n"
            f"–¢–µ–≥–∏: {', '.join(item.tags)}",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤–∞–∫–∞–Ω—Å—ñ—ó",
                            url=item.link,
                        )
                    ]
                ]
            ),
        )
        await asyncio.sleep(0.5)

    if len(data) > 5:
        await message.answer(
            text="–û—Å—å! –¶–µ –≤–∞–∫–∞–Ω—Å—ñ—ó, —è–∫—ñ –º–∏ –∑–Ω–∞–π—à–ª–∏ –∑–∞ –≤–∞—à–∏–º–∏ —Ç–µ–º–∞–º–∏üëÜ",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–ü–æ–∫–∞–∑–∞—Ç–∏ —â–µ 5 –≤–∞–∫–∞–Ω—Å—ñ–π",
                            callback_data=f"next_vacancy:{count}",
                        )
                    ]
                ]
            ),
        )
    elif len(data) == 0:
        await message.answer(
            text="–ù–∞ –∂–∞–ª—å, –º–∏ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –≤–∞–∫–∞–Ω—Å—ñ–π –∑–∞ –≤–∞—à–∏–º–∏ —Ç–µ–º–∞–º–∏ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ, –¥–æ–¥–∞–π—Ç–µ –Ω–æ–≤—ñ —Ç–µ–º–∏ –∞–±–æ —Ä–µ–¥–∞–≥—É–π—Ç–µ —Ñ—ñ–ª—å—Ç—Ä–∏.",
            reply_markup=await kb.reply.menu.menu_keyboard(message.chat.id),
        )


@router.message(F.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–µ–º–∏")
async def handle_active_topics(message: Message):
    user = await rq.get_user_by_id(message.chat.id)
    user_categories = list(dict.fromkeys(item.category for item in user.category_items))

    await message.answer(
        text=f"–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–µ–º–∏üëá",
        reply_markup=await kb.inline.categories.inline_categories_to_delete(
            categories=user_categories
        ),
    )


@router.message(F.text == "–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º–∏")
async def handle_update_topics(message: Message):
    await message.answer(
        text="–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, —è–∫—ñ –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—åüëá",
        reply_markup=await kb.inline.categories.update_categories()
    )